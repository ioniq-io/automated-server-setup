c=l:'Create your nodejs entry file that will be monitored by PM2.'
echo "#!/usr/bin/env nodejs" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "var http = require('http');" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "http.createServer(function (req, res) {" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "  res.writeHead(200, {'Content-Type': 'text/plain'});" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "  res.end('Hello World\n');" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "}).listen(8080, 'localhost');" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null
echo "console.log('Server running at http://localhost:8080/');" | sudo tee --append /var/www/$SITE_DOMAIN/$SITE_INIT_FILE_NAME > /dev/null

c=l:'Install PM2 to monitor our nodejs application.'
sudo npm install -g --assume-yes pm2

c=l:'Start the nodejs application with PM2. The application will auto-restart from this point.'
pm2 start $SITE_INIT_FILE_NAME

c=l:'Set PM2 to start on system startup.'
sudo su -c "env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER_WITH_ROOT_ACCESS --hp /home/$USER_WITH_ROOT_ACCESS"

c=l:'Install Nginx to reverse-proxy our nodejs app.'
sudo apt-get --assume-yes install nginx

c=l:'Delete the sample Nginx default server block.'
sudo rm /etc/nginx/sites-available/default

c=l:'Replace the server block we just deleted with the configuration to reverse proxy to your app.'
echo "server {" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "    listen 80;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "    server_name example.com;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "    location / {" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_pass http://localhost:8080;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_http_version 1.1;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_set_header Upgrade $http_upgrade;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_set_header Connection 'upgrade';" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_set_header Host $host;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "        proxy_cache_bypass $http_upgrade;" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "    }" | sudo tee --append /etc/nginx/sites-available/default > /dev/null
echo "}" | sudo tee --append /etc/nginx/sites-available/default > /dev/null

c=l:'Restart Nginx to apply the new server block we just created.'
sudo systemctl restart nginx

c=l:'Allow full permission to Nginx in the firewall.'
sudo ufw allow 'Nginx Full'

c=l:'LetsEncrypt ENABLED flag condition.'
if [ "$LetsEncrypt_ENABLED" = "true" ]; then
    c=l:'Install LetsEncrypt to generate our SSL certificate.'
    sudo apt-get install letsencrypt

    c=l:'Stop the Nginx service. This is required by LetsEncrypt to validate we own the domain name.'
    sudo systemctl stop nginx

    c=l:''
    sudo letsencrypt certonly --standalone
fi

c=l:''